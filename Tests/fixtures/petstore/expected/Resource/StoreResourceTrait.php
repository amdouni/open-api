<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\Tests\Expected\Resource;

use Jane\OpenApiRuntime\Client\QueryParam;

trait StoreResourceTrait
{
    /**
     * Returns a map of status codes to quantities.
     *
     * @param array  $parameters List of parameters
     * @param string $fetch      Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getInventory(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam();
        $url = '/store/inventory';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return json_decode((string) $response->getBody());
            }
        }

        return $response;
    }

    /**
     * @param \Jane\OpenApi\Tests\Expected\Model\Order $body       order placed for purchasing the pet
     * @param array                                    $parameters List of parameters
     * @param string                                   $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\PlaceOrderBadRequestException
     *
     * @return \Psr\Http\Message\ResponseInterface|\Jane\OpenApi\Tests\Expected\Model\Order
     */
    public function placeOrder(\Jane\OpenApi\Tests\Expected\Model\Order $body, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam();
        $url = '/store/order';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => 'application/json'], $queryParam->buildHeaders($parameters));
        $body = $this->serializer->serialize($body, 'json');
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return $this->serializer->deserialize((string) $response->getBody(), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Order', 'json');
            }
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\PlaceOrderBadRequestException();
            }
        }

        return $response;
    }

    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors.
     *
     * @param int    $orderId    ID of the order that needs to be deleted
     * @param array  $parameters List of parameters
     * @param string $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\DeleteOrderBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\DeleteOrderNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function deleteOrder(int $orderId, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam();
        $url = '/store/order/{orderId}';
        $url = str_replace('{orderId}', urlencode($orderId), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('DELETE', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\DeleteOrderBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\DeleteOrderNotFoundException();
            }
        }

        return $response;
    }

    /**
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions.
     *
     * @param int    $orderId    ID of pet that needs to be fetched
     * @param array  $parameters List of parameters
     * @param string $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetOrderByIdBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetOrderByIdNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface|\Jane\OpenApi\Tests\Expected\Model\Order
     */
    public function getOrderById(int $orderId, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam();
        $url = '/store/order/{orderId}';
        $url = str_replace('{orderId}', urlencode($orderId), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return $this->serializer->deserialize((string) $response->getBody(), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Order', 'json');
            }
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\GetOrderByIdBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\GetOrderByIdNotFoundException();
            }
        }

        return $response;
    }
}
