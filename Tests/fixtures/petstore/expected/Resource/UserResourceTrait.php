<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\Tests\Expected\Resource;

use Jane\OpenApiRuntime\Client\QueryParam;

trait UserResourceTrait
{
    /**
     * This can only be done by the logged in user.
     *
     * @param \Jane\OpenApi\Tests\Expected\Model\User $body       Created user object
     * @param array                                   $parameters List of parameters
     * @param string                                  $fetch      Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function createUser(\Jane\OpenApi\Tests\Expected\Model\User $body, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/user';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $this->serializer->serialize($body, 'json');
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            return null;
        }

        return $response;
    }

    /**
     * @param \Jane\OpenApi\Tests\Expected\Model\User[] $body       List of user object
     * @param array                                     $parameters List of parameters
     * @param string                                    $fetch      Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function createUsersWithArrayInput($body, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/user/createWithArray';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $body;
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            return null;
        }

        return $response;
    }

    /**
     * @param \Jane\OpenApi\Tests\Expected\Model\User[] $body       List of user object
     * @param array                                     $parameters List of parameters
     * @param string                                    $fetch      Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function createUsersWithListInput($body, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/user/createWithList';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $body;
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            return null;
        }

        return $response;
    }

    /**
     * @param array $parameters {
     *
     *     @var string $username The user name for login
     *     @var string $password The password for login in clear text
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\LoginUserBadRequestException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function loginUser(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addQueryParameter('username', true, ['string']);
        $queryParam->addQueryParameter('password', true, ['string']);
        $url = '/user/login';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return json_decode((string) $response->getBody());
            }
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\LoginUserBadRequestException();
            }
        }

        return $response;
    }

    /**
     * @param array  $parameters List of parameters
     * @param string $fetch      Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function logoutUser(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/user/logout';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            return null;
        }

        return $response;
    }

    /**
     * This can only be done by the logged in user.
     *
     * @param string $username   The name that needs to be deleted
     * @param array  $parameters List of parameters
     * @param string $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\DeleteUserBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\DeleteUserNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function deleteUser(string $username, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/user/{username}';
        $url = str_replace('{username}', urlencode($username), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('DELETE', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\DeleteUserBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\DeleteUserNotFoundException();
            }
        }

        return $response;
    }

    /**
     * @param string $username   The name that needs to be fetched. Use user1 for testing.
     * @param array  $parameters List of parameters
     * @param string $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetUserByNameBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetUserByNameNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface|\Jane\OpenApi\Tests\Expected\Model\User
     */
    public function getUserByName(string $username, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/user/{username}';
        $url = str_replace('{username}', urlencode($username), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return $this->serializer->deserialize((string) $response->getBody(), 'Jane\\OpenApi\\Tests\\Expected\\Model\\User', 'json');
            }
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\GetUserByNameBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\GetUserByNameNotFoundException();
            }
        }

        return $response;
    }

    /**
     * This can only be done by the logged in user.
     *
     * @param string                                  $username   name that need to be updated
     * @param \Jane\OpenApi\Tests\Expected\Model\User $body       Updated user object
     * @param array                                   $parameters List of parameters
     * @param string                                  $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\UpdateUserBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\UpdateUserNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function updateUser(string $username, \Jane\OpenApi\Tests\Expected\Model\User $body, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/user/{username}';
        $url = str_replace('{username}', urlencode($username), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $this->serializer->serialize($body, 'json');
        $request = $this->messageFactory->createRequest('PUT', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\UpdateUserBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\UpdateUserNotFoundException();
            }
        }

        return $response;
    }
}
