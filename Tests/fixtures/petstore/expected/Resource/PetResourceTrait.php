<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\Tests\Expected\Resource;

use Jane\OpenApiRuntime\Client\QueryParam;

trait PetResourceTrait
{
    /**
     * @param \Jane\OpenApi\Tests\Expected\Model\Pet $body       Pet object that needs to be added to the store
     * @param array                                  $parameters List of parameters
     * @param string                                 $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\AddPetMethodNotAllowedException
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function addPet(\Jane\OpenApi\Tests\Expected\Model\Pet $body, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/pet';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $this->serializer->serialize($body, 'json');
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (405 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\AddPetMethodNotAllowedException();
            }
        }

        return $response;
    }

    /**
     * @param \Jane\OpenApi\Tests\Expected\Model\Pet $body       Pet object that needs to be added to the store
     * @param array                                  $parameters List of parameters
     * @param string                                 $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\UpdatePetBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\UpdatePetNotFoundException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\UpdatePetMethodNotAllowedException
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function updatePet(\Jane\OpenApi\Tests\Expected\Model\Pet $body, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/pet';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $this->serializer->serialize($body, 'json');
        $request = $this->messageFactory->createRequest('PUT', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\UpdatePetBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\UpdatePetNotFoundException();
            }
            if (405 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\UpdatePetMethodNotAllowedException();
            }
        }

        return $response;
    }

    /**
     * Multiple status values can be provided with comma separated strings.
     *
     * @param array $parameters {
     *
     *     @var array $status Status values that need to be considered for filter
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\FindPetsByStatusBadRequestException
     *
     * @return \Psr\Http\Message\ResponseInterface|\Jane\OpenApi\Tests\Expected\Model\Pet
     */
    public function findPetsByStatus(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addQueryParameter('status', true, ['array']);
        $url = '/pet/findByStatus';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return $this->serializer->deserialize((string) $response->getBody(), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Pet[]', 'json');
            }
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\FindPetsByStatusBadRequestException();
            }
        }

        return $response;
    }

    /**
     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param array $parameters {
     *
     *     @var array $tags Tags to filter by
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\FindPetsByTagsBadRequestException
     *
     * @return \Psr\Http\Message\ResponseInterface|\Jane\OpenApi\Tests\Expected\Model\Pet
     */
    public function findPetsByTags(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addQueryParameter('tags', true, ['array']);
        $url = '/pet/findByTags';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return $this->serializer->deserialize((string) $response->getBody(), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Pet[]', 'json');
            }
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\FindPetsByTagsBadRequestException();
            }
        }

        return $response;
    }

    /**
     * @param int   $petId      Pet id to delete
     * @param array $parameters {
     *
     *     @var string $api_key
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\DeletePetBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\DeletePetNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function deletePet(int $petId, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addHeaderParameter('api_key', false, ['string']);
        $url = '/pet/{petId}';
        $url = str_replace('{petId}', urlencode($petId), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('DELETE', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\DeletePetBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\DeletePetNotFoundException();
            }
        }

        return $response;
    }

    /**
     * Returns a single pet.
     *
     * @param int    $petId      ID of pet to return
     * @param array  $parameters List of parameters
     * @param string $fetch      Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetPetByIdBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetPetByIdNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface|\Jane\OpenApi\Tests\Expected\Model\Pet
     */
    public function getPetById(int $petId, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/pet/{petId}';
        $url = str_replace('{petId}', urlencode($petId), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return $this->serializer->deserialize((string) $response->getBody(), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Pet', 'json');
            }
            if (400 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\GetPetByIdBadRequestException();
            }
            if (404 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\GetPetByIdNotFoundException();
            }
        }

        return $response;
    }

    /**
     * @param int   $petId      ID of pet that needs to be updated
     * @param array $parameters {
     *
     *     @var string $name Updated name of the pet
     *     @var string $status Updated status of the pet
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\UpdatePetWithFormMethodNotAllowedException
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function updatePetWithForm(int $petId, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addFormParameter('name', false, ['string']);
        $queryParam->addFormParameter('status', false, ['string']);
        $url = '/pet/{petId}';
        $url = str_replace('{petId}', urlencode($petId), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/x-www-form-urlencoded']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (405 === $response->getStatusCode()) {
                throw new \Jane\OpenApi\Tests\Expected\Exception\UpdatePetWithFormMethodNotAllowedException();
            }
        }

        return $response;
    }

    /**
     * @param int   $petId      ID of pet to update
     * @param array $parameters {
     *
     *     @var string $additionalMetadata Additional data to pass to server
     *     @var string|resource|\Psr\Http\Message\StreamInterface $file file to upload
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|\Jane\OpenApi\Tests\Expected\Model\ApiResponse
     */
    public function uploadFile(int $petId, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addFormParameter('additionalMetadata', false, ['string']);
        $queryParam->addFormParameter('file', false, ['string', 'resource', '\\Psr\\Http\\Message\\StreamInterface']);
        $url = '/pet/{petId}/uploadImage';
        $url = str_replace('{petId}', urlencode($petId), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Accept' => ['application/json'], 'Content-Type' => ['application/x-www-form-urlencoded']], $queryParam->buildHeaders($parameters));
        $multipartBuilder = $queryParam->buildFormDataMultipart($parameters);
        $headers = array_merge($headers, ['Content-Type' => ['multipart/form-data; boundary="' . ($multipartBuilder->getBoundary() . '"')]]);
        $body = $multipartBuilder->build();
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return $this->serializer->deserialize((string) $response->getBody(), 'Jane\\OpenApi\\Tests\\Expected\\Model\\ApiResponse', 'json');
            }
        }

        return $response;
    }
}
