<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\Tests\Expected\Resource;

use Jane\OpenApiRuntime\Client\QueryParam;

trait TestAsyncResourceTrait
{
    /**
     * @param array                  $parameters        List of parameters
     * @param string                 $fetch             Fetch mode (object or response)
     * @param \Amp\CancellationToken $cancellationToken Token to cancel the request
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetTestBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetTestNotFoundException
     *
     * @return \Amp\Promise<\Amp\Artax\Response|\Jane\OpenApi\Tests\Expected\Model\Schema>
     */
    public function getTest(array $parameters = [], string $fetch = self::FETCH_OBJECT, \Amp\CancellationToken $cancellationToken = null): \Amp\Promise
    {
        return \Amp\call(function () use ($parameters, $fetch, $cancellationToken) {
            $queryParam = new QueryParam();
            $url = '/test';
            $url = $url . ('?' . $queryParam->buildQueryString($parameters));
            $headers = $queryParam->buildHeaders($parameters);
            $body = $queryParam->buildFormDataString($parameters);
            $request = new \Amp\Artax\Request($url, 'GET');
            $request = $request->withHeaders($headers);
            $request = $request->withBody($body);
            $response = (yield $this->httpClient->request($request, [], $cancellationToken));
            if (self::FETCH_OBJECT === $fetch) {
                if (200 === $response->getStatus()) {
                    return $this->serializer->deserialize((yield $response->getBody()), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Schema', 'json');
                }
                if (400 === $response->getStatus()) {
                    throw new \Jane\OpenApi\Tests\Expected\Exception\GetTestBadRequestException($this->serializer->deserialize((yield $response->getBody()), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Error', 'json'));
                }
                if (404 === $response->getStatus()) {
                    throw new \Jane\OpenApi\Tests\Expected\Exception\GetTestNotFoundException($this->serializer->deserialize((yield $response->getBody()), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Error', 'json'));
                }
            }

            return $response;
        });
    }

    /**
     * @param int                    $id                id
     * @param array                  $parameters        List of parameters
     * @param string                 $fetch             Fetch mode (object or response)
     * @param \Amp\CancellationToken $cancellationToken Token to cancel the request
     *
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetTestByIdBadRequestException
     * @throws \Jane\OpenApi\Tests\Expected\Exception\GetTestByIdNotFoundException
     *
     * @return \Amp\Promise<\Amp\Artax\Response|\Jane\OpenApi\Tests\Expected\Model\TestIdGetResponse200>
     */
    public function getTestById(int $id, array $parameters = [], string $fetch = self::FETCH_OBJECT, \Amp\CancellationToken $cancellationToken = null): \Amp\Promise
    {
        return \Amp\call(function () use ($id, $parameters, $fetch, $cancellationToken) {
            $queryParam = new QueryParam();
            $url = '/test/{id}';
            $url = str_replace('{id}', urlencode($id), $url);
            $url = $url . ('?' . $queryParam->buildQueryString($parameters));
            $headers = $queryParam->buildHeaders($parameters);
            $body = $queryParam->buildFormDataString($parameters);
            $request = new \Amp\Artax\Request($url, 'GET');
            $request = $request->withHeaders($headers);
            $request = $request->withBody($body);
            $response = (yield $this->httpClient->request($request, [], $cancellationToken));
            if (self::FETCH_OBJECT === $fetch) {
                if (200 === $response->getStatus()) {
                    return $this->serializer->deserialize((yield $response->getBody()), 'Jane\\OpenApi\\Tests\\Expected\\Model\\TestIdGetResponse200', 'json');
                }
                if (400 === $response->getStatus()) {
                    throw new \Jane\OpenApi\Tests\Expected\Exception\GetTestByIdBadRequestException($this->serializer->deserialize((yield $response->getBody()), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Error', 'json'));
                }
                if (404 === $response->getStatus()) {
                    throw new \Jane\OpenApi\Tests\Expected\Exception\GetTestByIdNotFoundException($this->serializer->deserialize((yield $response->getBody()), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Error', 'json'));
                }
            }

            return $response;
        });
    }

    /**
     * @param array                  $parameters        List of parameters
     * @param string                 $fetch             Fetch mode (object or response)
     * @param \Amp\CancellationToken $cancellationToken Token to cancel the request
     *
     * @return \Amp\Promise<\Amp\Artax\Response|\Jane\OpenApi\Tests\Expected\Model\Schema>
     */
    public function getTestList(array $parameters = [], string $fetch = self::FETCH_OBJECT, \Amp\CancellationToken $cancellationToken = null): \Amp\Promise
    {
        return \Amp\call(function () use ($parameters, $fetch, $cancellationToken) {
            $queryParam = new QueryParam();
            $url = '/test-list';
            $url = $url . ('?' . $queryParam->buildQueryString($parameters));
            $headers = $queryParam->buildHeaders($parameters);
            $body = $queryParam->buildFormDataString($parameters);
            $request = new \Amp\Artax\Request($url, 'GET');
            $request = $request->withHeaders($headers);
            $request = $request->withBody($body);
            $response = (yield $this->httpClient->request($request, [], $cancellationToken));
            if (self::FETCH_OBJECT === $fetch) {
                if (200 === $response->getStatus()) {
                    return $this->serializer->deserialize((yield $response->getBody()), 'Jane\\OpenApi\\Tests\\Expected\\Model\\Schema[]', 'json');
                }
            }

            return $response;
        });
    }
}
