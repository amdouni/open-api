<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Jane\OpenApi\Tests\Expected\Resource;

use Jane\OpenApiRuntime\Client\QueryParam;

trait TestResourceTrait
{
    /**
     * @param array $testBody
     * @param array $parameters {
     *
     *     @var string $testQuery
     *     @var string $testHeader
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function testGetWithPathParameters(array $testBody, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addQueryParameter('testQuery', false, ['string']);
        $queryParam->addHeaderParameter('testHeader', false, ['string']);
        $url = '/test-path-parameters/{testPath}';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $testBody;
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);

        return $response;
    }

    /**
     * @param array $testBody
     * @param array $parameters {
     *
     *     @var string $testQuery
     *     @var string $testHeader
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface
     */
    public function testPostWithPathParameters(array $testBody, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addQueryParameter('testQuery', false, ['string']);
        $queryParam->addHeaderParameter('testHeader', false, ['string']);
        $url = '/test-path-parameters/{testPath}';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Content-Type' => ['application/json']], $queryParam->buildHeaders($parameters));
        $body = $testBody;
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);

        return $response;
    }

    /**
     * @param array $parameters {
     *
     *     @var string $testString
     *     @var int $testInteger
     *     @var float $testFloat
     *     @var array $testArray
     *     @var string $testRequired
     *     @var string $testDefault
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function testQueryParameters(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addQueryParameter('testString', false, ['string']);
        $queryParam->addQueryParameter('testInteger', false, ['int']);
        $queryParam->addQueryParameter('testFloat', false, ['float']);
        $queryParam->addQueryParameter('testArray', false, ['array']);
        $queryParam->addQueryParameter('testRequired', true, ['string']);
        $queryParam->addQueryParameter('testDefault', false, ['string'], 'test');
        $url = '/test-query';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = $queryParam->buildHeaders($parameters);
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return null;
            }
        }

        return $response;
    }

    /**
     * @param array $parameters {
     *
     *     @var string $testString
     *     @var int $testInteger
     *     @var float $testFloat
     *     @var array $testArray
     *     @var string $testRequired
     *     @var string $testDefault
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function testHeaderParameters(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addHeaderParameter('testString', false, ['string']);
        $queryParam->addHeaderParameter('testInteger', false, ['int']);
        $queryParam->addHeaderParameter('testFloat', false, ['float']);
        $queryParam->addHeaderParameter('testArray', false, ['array']);
        $queryParam->addHeaderParameter('testRequired', true, ['string']);
        $queryParam->addHeaderParameter('testDefault', false, ['string'], 'test');
        $url = '/test-header';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = $queryParam->buildHeaders($parameters);
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return null;
            }
        }

        return $response;
    }

    /**
     * @param array $parameters {
     *
     *     @var string $testString
     *     @var int $testInteger
     *     @var float $testFloat
     *     @var array $testArray
     *     @var string $testRequired
     *     @var string $testDefault
     * }
     *
     * @param string $fetch Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function testFormParameters(array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $queryParam->addFormParameter('testString', false, ['string']);
        $queryParam->addFormParameter('testInteger', false, ['int']);
        $queryParam->addFormParameter('testFloat', false, ['float']);
        $queryParam->addFormParameter('testArray', false, ['array']);
        $queryParam->addFormParameter('testRequired', true, ['string']);
        $queryParam->addFormParameter('testDefault', false, ['string'], 'test');
        $url = '/test-form';
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = array_merge(['Content-Type' => ['application/x-www-form-urlencoded']], $queryParam->buildHeaders($parameters));
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('POST', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return null;
            }
        }

        return $response;
    }

    /**
     * @param string $testString
     * @param int    $testInteger
     * @param float  $testFloat
     * @param array  $parameters  List of parameters
     * @param string $fetch       Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function testPathParameters(string $testString, int $testInteger, float $testFloat, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/test-path/{testString}/{testInteger}/{testFloat}';
        $url = str_replace('{testString}', urlencode($testString), $url);
        $url = str_replace('{testInteger}', urlencode($testInteger), $url);
        $url = str_replace('{testFloat}', urlencode($testFloat), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = $queryParam->buildHeaders($parameters);
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return null;
            }
        }

        return $response;
    }

    /**
     * @param int    $testInteger
     * @param array  $parameters  List of parameters
     * @param string $fetch       Fetch mode (object or response)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getByTestInteger(int $testInteger, array $parameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $queryParam = new QueryParam($this->streamFactory);
        $url = '/{test_integer}';
        $url = str_replace('{test_integer}', urlencode($testInteger), $url);
        $url = $url . ('?' . $queryParam->buildQueryString($parameters));
        $headers = $queryParam->buildHeaders($parameters);
        $body = $queryParam->buildFormDataString($parameters);
        $request = $this->messageFactory->createRequest('GET', $url, $headers, $body);
        $response = $this->httpClient->sendRequest($request);
        if (self::FETCH_OBJECT === $fetch) {
            if (200 === $response->getStatusCode()) {
                return null;
            }
        }

        return $response;
    }
}
